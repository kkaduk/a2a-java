This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
src/
  main/
    java/
      net/
        kaduk/
          a2a/
            A2AAgent.java
            A2AAgentRegistry.java
            A2AAgentSkill.java
            A2AAutoConfiguration.java
            A2AError.java
            A2AWebClientConfiguration.java
            A2AWebClientService.java
            AgentCapabilities.java
            AgentCard.java
            AgentController.java
            AgentExtension.java
            AgentProvider.java
            AgentSkill.java
            Artifact.java
            CancelTaskRequest.java
            CancelTaskResponse.java
            DataPart.java
            ExampleMultiAgentUsage.java
            FilePart.java
            GetTaskPushNotificationConfigResponse.java
            GetTaskRequest.java
            GetTaskResponse.java
            Message.java
            MessageSendConfiguration.java
            MessageSendParams.java
            Part.java
            PushNotificationAuthenticationInfo.java
            PushNotificationConfig.java
            SendMessageRequest.java
            SendMessageSuccessResponse.java
            SendStreamingMessageRequest.java
            SetTaskPushNotificationConfigRequest.java
            SetTaskPushNotificationConfigResponse.java
            Task.java
            TaskIdParams.java
            TaskPushNotificationConfig.java
            TaskQueryParams.java
            TaskState.java
            TaskStatus.java
            TextPart.java
    resources/
      META-INF/
        spring/
          org.springframework.boot.autoconfigure.AutoConfiguration.imports
      a2a.json

================================================================
Files
================================================================

================
File: src/main/java/net/kaduk/a2a/A2AAgent.java
================
package net.kaduk.a2a;

import java.lang.annotation.*;

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface A2AAgent {
    String name();
    String version();
    String description() default "";
}

================
File: src/main/java/net/kaduk/a2a/A2AAgentSkill.java
================
package net.kaduk.a2a;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface A2AAgentSkill {
    String id();
    String name();
    String description() default "";
    String[] tags() default {};
}

================
File: src/main/java/net/kaduk/a2a/A2AError.java
================
// src/main/java/net/kaduk/a2a/A2AError.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class A2AError {
    @JsonProperty("code")
    private Integer code;

    @JsonProperty("message")
    private String message;

    @JsonProperty("data")
    private Object data;
}

================
File: src/main/java/net/kaduk/a2a/A2AWebClientConfiguration.java
================
// src/main/java/net/kaduk/a2a/A2AWebClientConfiguration.java
package net.kaduk.a2a;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class A2AWebClientConfiguration {
    
    @Bean
    @ConditionalOnMissingBean
    public WebClient webClient() {
        return WebClient.builder()
                .codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(10 * 1024 * 1024))
                .build();
    }
}

================
File: src/main/java/net/kaduk/a2a/AgentCapabilities.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AgentCapabilities {
    @JsonProperty("extensions")
    private List<AgentExtension> extensions;

    @JsonProperty("pushNotifications")
    private Boolean pushNotifications;

    @JsonProperty("stateTransitionHistory")
    private Boolean stateTransitionHistory;

    @JsonProperty("streaming")
    private Boolean streaming;
}

================
File: src/main/java/net/kaduk/a2a/AgentExtension.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AgentExtension {
    @JsonProperty("description")
    private String description;

    @JsonProperty("params")
    private Map<String, Object> params;

    @JsonProperty("required")
    private Boolean required;

    @JsonProperty("uri")
    private String uri;
}

================
File: src/main/java/net/kaduk/a2a/AgentProvider.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AgentProvider {
    @JsonProperty("organization")
    private String organization;

    @JsonProperty("url")
    private String url;
}

================
File: src/main/java/net/kaduk/a2a/AgentSkill.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AgentSkill {
    @JsonProperty("description")
    private String description;

    @JsonProperty("examples")
    private List<String> examples;

    @JsonProperty("id")
    private String id;

    @JsonProperty("inputModes")
    private List<String> inputModes;

    @JsonProperty("name")
    private String name;

    @JsonProperty("outputModes")
    private List<String> outputModes;

    @JsonProperty("tags")
    private List<String> tags;
}

================
File: src/main/java/net/kaduk/a2a/Artifact.java
================
// src/main/java/net/kaduk/a2a/Artifact.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;
import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Artifact {
    @JsonProperty("artifactId")
    private String artifactId;

    @JsonProperty("description")
    private String description;

    @JsonProperty("extensions")
    private List<String> extensions;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;

    @JsonProperty("name")
    private String name;

    @JsonProperty("parts")
    private List<Part> parts;
}

================
File: src/main/java/net/kaduk/a2a/CancelTaskRequest.java
================
// src/main/java/net/kaduk/a2a/CancelTaskRequest.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CancelTaskRequest {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("method")
    @Builder.Default
    private String method = "tasks/cancel";

    @JsonProperty("id")
    private String id;

    @JsonProperty("params")
    private TaskIdParams params;
}

================
File: src/main/java/net/kaduk/a2a/CancelTaskResponse.java
================
// src/main/java/net/kaduk/a2a/CancelTaskResponse.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CancelTaskResponse {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("id")
    private String id;

    @JsonProperty("result")
    private Task result;

    @JsonProperty("error")
    private A2AError error;
}

================
File: src/main/java/net/kaduk/a2a/DataPart.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@EqualsAndHashCode(callSuper = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DataPart extends Part {
    @Builder.Default
    @JsonProperty("kind")
    private final String kind = "data";

    @JsonProperty("data")
    private Map<String, Object> data;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;
}

================
File: src/main/java/net/kaduk/a2a/FilePart.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@EqualsAndHashCode(callSuper = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class FilePart extends Part {
    @Builder.Default
    @JsonProperty("kind")
    private final String kind = "file";

    @JsonProperty("file")
    private Object file; // could be FileWithBytes or FileWithUri

    @JsonProperty("metadata")
    private Map<String, Object> metadata;
}

// FileWithBytes.java
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
class FileWithBytes {
    @JsonProperty("bytes")
    private String bytes; // base64

    @JsonProperty("mimeType")
    private String mimeType;

    @JsonProperty("name")
    private String name;
}

// FileWithUri.java
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
class FileWithUri {
    @JsonProperty("uri")
    private String uri;

    @JsonProperty("mimeType")
    private String mimeType;

    @JsonProperty("name")
    private String name;
}

================
File: src/main/java/net/kaduk/a2a/GetTaskPushNotificationConfigResponse.java
================
// src/main/java/net/kaduk/a2a/GetTaskPushNotificationConfigResponse.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class GetTaskPushNotificationConfigResponse {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("id")
    private String id;

    @JsonProperty("result")
    private TaskPushNotificationConfig result;

    @JsonProperty("error")
    private A2AError error;
}

================
File: src/main/java/net/kaduk/a2a/GetTaskRequest.java
================
// src/main/java/net/kaduk/a2a/GetTaskRequest.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class GetTaskRequest {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("method")
    @Builder.Default
    private String method = "tasks/get";

    @JsonProperty("id")
    private String id;

    @JsonProperty("params")
    private TaskQueryParams params;
}

================
File: src/main/java/net/kaduk/a2a/GetTaskResponse.java
================
// src/main/java/net/kaduk/a2a/GetTaskResponse.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class GetTaskResponse {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("id")
    private String id;

    @JsonProperty("result")
    private Task result;

    @JsonProperty("error")
    private A2AError error;
}

================
File: src/main/java/net/kaduk/a2a/MessageSendConfiguration.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class MessageSendConfiguration {

    @JsonProperty("acceptedOutputModes")
    private List<String> acceptedOutputModes;

    @JsonProperty("blocking")
    private Boolean blocking;

    @JsonProperty("historyLength")
    private Integer historyLength;

    // For now, omitting the pushNotificationConfig for brevity; add as needed.
}

================
File: src/main/java/net/kaduk/a2a/Part.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.*;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "kind",
        visible = true
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = TextPart.class, name = "text"),
        @JsonSubTypes.Type(value = FilePart.class, name = "file"),
        @JsonSubTypes.Type(value = DataPart.class, name = "data")
})
@JsonInclude(JsonInclude.Include.NON_NULL)
@Data
public abstract class Part {
    private String kind;
}

================
File: src/main/java/net/kaduk/a2a/PushNotificationAuthenticationInfo.java
================
// src/main/java/net/kaduk/a2a/PushNotificationAuthenticationInfo.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PushNotificationAuthenticationInfo {
    @JsonProperty("credentials")
    private String credentials;

    @JsonProperty("schemes")
    private List<String> schemes;
}

================
File: src/main/java/net/kaduk/a2a/PushNotificationConfig.java
================
// src/main/java/net/kaduk/a2a/PushNotificationConfig.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PushNotificationConfig {
    @JsonProperty("id")
    private String id;

    @JsonProperty("token")
    private String token;

    @JsonProperty("url")
    private String url;

    @JsonProperty("authentication")
    private PushNotificationAuthenticationInfo authentication;
}

================
File: src/main/java/net/kaduk/a2a/SendMessageRequest.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SendMessageRequest {
    @Builder.Default
    @JsonProperty("jsonrpc")
    private final String jsonrpc = "2.0";

    @Builder.Default
    @JsonProperty("method")
    private final String method = "message/send";

    @JsonProperty("id")
    private String id;

    @JsonProperty("params")
    private MessageSendParams params;
}

================
File: src/main/java/net/kaduk/a2a/SendStreamingMessageRequest.java
================
// src/main/java/net/kaduk/a2a/SendStreamingMessageRequest.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SendStreamingMessageRequest {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("method")
    @Builder.Default
    private String method = "message/stream";

    @JsonProperty("id")
    private String id;

    @JsonProperty("params")
    private MessageSendParams params;
}

================
File: src/main/java/net/kaduk/a2a/SetTaskPushNotificationConfigRequest.java
================
// src/main/java/net/kaduk/a2a/SetTaskPushNotificationConfigRequest.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SetTaskPushNotificationConfigRequest {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("method")
    @Builder.Default
    private String method = "tasks/pushNotificationConfig/set";

    @JsonProperty("id")
    private String id;

    @JsonProperty("params")
    private TaskPushNotificationConfig params;
}

================
File: src/main/java/net/kaduk/a2a/SetTaskPushNotificationConfigResponse.java
================
// src/main/java/net/kaduk/a2a/SetTaskPushNotificationConfigResponse.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SetTaskPushNotificationConfigResponse {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("id")
    private String id;

    @JsonProperty("result")
    private TaskPushNotificationConfig result;

    @JsonProperty("error")
    private A2AError error;
}

================
File: src/main/java/net/kaduk/a2a/Task.java
================
// src/main/java/net/kaduk/a2a/Task.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;
import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Task {
    @JsonProperty("artifacts")
    private List<Artifact> artifacts;

    @JsonProperty("contextId")
    private String contextId;

    @JsonProperty("history")
    private List<Message> history;

    @JsonProperty("id")
    private String id;

    @JsonProperty("kind")
    @Builder.Default
    private String kind = "task";

    @JsonProperty("metadata")
    private Map<String, Object> metadata;

    @JsonProperty("status")
    private TaskStatus status;
}

================
File: src/main/java/net/kaduk/a2a/TaskIdParams.java
================
// src/main/java/net/kaduk/a2a/TaskIdParams.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TaskIdParams {
    @JsonProperty("id")
    private String id;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;
}

================
File: src/main/java/net/kaduk/a2a/TaskPushNotificationConfig.java
================
// src/main/java/net/kaduk/a2a/TaskPushNotificationConfig.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TaskPushNotificationConfig {
    @JsonProperty("pushNotificationConfig")
    private PushNotificationConfig pushNotificationConfig;

    @JsonProperty("taskId")
    private String taskId;
}

================
File: src/main/java/net/kaduk/a2a/TaskQueryParams.java
================
// src/main/java/net/kaduk/a2a/TaskQueryParams.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TaskQueryParams {
    @JsonProperty("historyLength")
    private Integer historyLength;

    @JsonProperty("id")
    private String id;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;
}

================
File: src/main/java/net/kaduk/a2a/TaskState.java
================
// src/main/java/net/kaduk/a2a/TaskState.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public enum TaskState {
    SUBMITTED("submitted"),
    WORKING("working"),
    INPUT_REQUIRED("input-required"),
    COMPLETED("completed"),
    CANCELED("canceled"),
    FAILED("failed"),
    REJECTED("rejected"),
    AUTH_REQUIRED("auth-required"),
    UNKNOWN("unknown");

    private final String value;

    TaskState(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    @JsonCreator
    public static TaskState fromValue(String value) {
        for (TaskState state : TaskState.values()) {
            if (state.value.equals(value)) {
                return state;
            }
        }
        return UNKNOWN;
    }
}

================
File: src/main/java/net/kaduk/a2a/TaskStatus.java
================
// src/main/java/net/kaduk/a2a/TaskStatus.java
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TaskStatus {
    @JsonProperty("message")
    private Message message;

    @JsonProperty("state")
    private TaskState state;

    @JsonProperty("timestamp")
    private String timestamp;
}

================
File: src/main/java/net/kaduk/a2a/TextPart.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@EqualsAndHashCode(callSuper = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class TextPart extends Part {
    @Builder.Default
    @JsonProperty("kind")
    private final String kind = "text";

    @JsonProperty("text")
    private String text;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;
}

================
File: src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports
================
net.kaduk.a2a.A2AAutoConfiguration

================
File: src/main/resources/a2a.json
================
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "A2AError": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONParseError"
                },
                {
                    "$ref": "#/definitions/InvalidRequestError"
                },
                {
                    "$ref": "#/definitions/MethodNotFoundError"
                },
                {
                    "$ref": "#/definitions/InvalidParamsError"
                },
                {
                    "$ref": "#/definitions/InternalError"
                },
                {
                    "$ref": "#/definitions/TaskNotFoundError"
                },
                {
                    "$ref": "#/definitions/TaskNotCancelableError"
                },
                {
                    "$ref": "#/definitions/PushNotificationNotSupportedError"
                },
                {
                    "$ref": "#/definitions/UnsupportedOperationError"
                },
                {
                    "$ref": "#/definitions/ContentTypeNotSupportedError"
                },
                {
                    "$ref": "#/definitions/InvalidAgentResponseError"
                }
            ]
        },
        "A2ARequest": {
            "anyOf": [
                {
                    "$ref": "#/definitions/SendMessageRequest"
                },
                {
                    "$ref": "#/definitions/SendStreamingMessageRequest"
                },
                {
                    "$ref": "#/definitions/GetTaskRequest"
                },
                {
                    "$ref": "#/definitions/CancelTaskRequest"
                },
                {
                    "$ref": "#/definitions/SetTaskPushNotificationConfigRequest"
                },
                {
                    "$ref": "#/definitions/GetTaskPushNotificationConfigRequest"
                },
                {
                    "$ref": "#/definitions/TaskResubscriptionRequest"
                }
            ],
            "description": "A2A supported request types"
        },
        "APIKeySecurityScheme": {
            "description": "API Key security scheme.",
            "properties": {
                "description": {
                    "description": "Description of this security scheme.",
                    "type": "string"
                },
                "in": {
                    "description": "The location of the API key. Valid values are \"query\", \"header\", or \"cookie\".",
                    "enum": [
                        "cookie",
                        "header",
                        "query"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The name of the header, query or cookie parameter to be used.",
                    "type": "string"
                },
                "type": {
                    "const": "apiKey",
                    "type": "string"
                }
            },
            "required": [
                "in",
                "name",
                "type"
            ],
            "type": "object"
        },
        "AgentCapabilities": {
            "description": "Defines optional capabilities supported by an agent.",
            "properties": {
                "extensions": {
                    "description": "extensions supported by this agent.",
                    "items": {
                        "$ref": "#/definitions/AgentExtension"
                    },
                    "type": "array"
                },
                "pushNotifications": {
                    "description": "true if the agent can notify updates to client.",
                    "type": "boolean"
                },
                "stateTransitionHistory": {
                    "description": "true if the agent exposes status change history for tasks.",
                    "type": "boolean"
                },
                "streaming": {
                    "description": "true if the agent supports SSE.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AgentCard": {
            "description": "An AgentCard conveys key information:\n- Overall details (version, name, description, uses)\n- Skills: A set of capabilities the agent can perform\n- Default modalities/content types supported by the agent.\n- Authentication requirements",
            "properties": {
                "capabilities": {
                    "$ref": "#/definitions/AgentCapabilities",
                    "description": "Optional capabilities supported by the agent."
                },
                "defaultInputModes": {
                    "description": "The set of interaction modes that the agent supports across all skills. This can be overridden per-skill.\nSupported media types for input.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "defaultOutputModes": {
                    "description": "Supported media types for output.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "A human-readable description of the agent. Used to assist users and\nother agents in understanding what the agent can do.",
                    "type": "string"
                },
                "documentationUrl": {
                    "description": "A URL to documentation for the agent.",
                    "type": "string"
                },
                "iconUrl": {
                    "description": "A URL to an icon for the agent.",
                    "type": "string"
                },
                "name": {
                    "description": "Human readable name of the agent.",
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/AgentProvider",
                    "description": "The service provider of the agent"
                },
                "security": {
                    "description": "Security requirements for contacting the agent.",
                    "items": {
                        "additionalProperties": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "securitySchemes": {
                    "additionalProperties": {
                        "$ref": "#/definitions/SecurityScheme"
                    },
                    "description": "Security scheme details used for authenticating with this agent.",
                    "type": "object"
                },
                "skills": {
                    "description": "Skills are a unit of capability that an agent can perform.",
                    "items": {
                        "$ref": "#/definitions/AgentSkill"
                    },
                    "type": "array"
                },
                "supportsAuthenticatedExtendedCard": {
                    "description": "true if the agent supports providing an extended agent card when the user is authenticated.\nDefaults to false if not specified.",
                    "type": "boolean"
                },
                "url": {
                    "description": "A URL to the address the agent is hosted at.",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the agent - format is up to the provider.",
                    "type": "string"
                }
            },
            "required": [
                "capabilities",
                "defaultInputModes",
                "defaultOutputModes",
                "description",
                "name",
                "skills",
                "url",
                "version"
            ],
            "type": "object"
        },
        "AgentExtension": {
            "description": "A declaration of an extension supported by an Agent.",
            "properties": {
                "description": {
                    "description": "A description of how this agent uses this extension.",
                    "type": "string"
                },
                "params": {
                    "additionalProperties": {},
                    "description": "Optional configuration for the extension.",
                    "type": "object"
                },
                "required": {
                    "description": "Whether the client must follow specific requirements of the extension.",
                    "type": "boolean"
                },
                "uri": {
                    "description": "The URI of the extension.",
                    "type": "string"
                }
            },
            "required": [
                "uri"
            ],
            "type": "object"
        },
        "AgentProvider": {
            "description": "Represents the service provider of an agent.",
            "properties": {
                "organization": {
                    "description": "Agent provider's organization name.",
                    "type": "string"
                },
                "url": {
                    "description": "Agent provider's URL.",
                    "type": "string"
                }
            },
            "required": [
                "organization",
                "url"
            ],
            "type": "object"
        },
        "AgentSkill": {
            "description": "Represents a unit of capability that an agent can perform.",
            "properties": {
                "description": {
                    "description": "Description of the skill - will be used by the client or a human\nas a hint to understand what the skill does.",
                    "type": "string"
                },
                "examples": {
                    "description": "The set of example scenarios that the skill can perform.\nWill be used by the client as a hint to understand how the skill can be used.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Unique identifier for the agent's skill.",
                    "type": "string"
                },
                "inputModes": {
                    "description": "The set of interaction modes that the skill supports\n(if different than the default).\nSupported media types for input.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Human readable name of the skill.",
                    "type": "string"
                },
                "outputModes": {
                    "description": "Supported media types for output.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tags": {
                    "description": "Set of tagwords describing classes of capabilities for this specific skill.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "description",
                "id",
                "name",
                "tags"
            ],
            "type": "object"
        },
        "Artifact": {
            "description": "Represents an artifact generated for a task.",
            "properties": {
                "artifactId": {
                    "description": "Unique identifier for the artifact.",
                    "type": "string"
                },
                "description": {
                    "description": "Optional description for the artifact.",
                    "type": "string"
                },
                "extensions": {
                    "description": "The URIs of extensions that are present or contributed to this Artifact.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Extension metadata.",
                    "type": "object"
                },
                "name": {
                    "description": "Optional name for the artifact.",
                    "type": "string"
                },
                "parts": {
                    "description": "Artifact parts.",
                    "items": {
                        "$ref": "#/definitions/Part"
                    },
                    "type": "array"
                }
            },
            "required": [
                "artifactId",
                "parts"
            ],
            "type": "object"
        },
        "AuthorizationCodeOAuthFlow": {
            "description": "Configuration details for a supported OAuth Flow",
            "properties": {
                "authorizationUrl": {
                    "description": "The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2\nstandard requires the use of TLS",
                    "type": "string"
                },
                "refreshUrl": {
                    "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2\nstandard requires the use of TLS.",
                    "type": "string"
                },
                "scopes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The available scopes for the OAuth2 security scheme. A map between the scope name and a short\ndescription for it. The map MAY be empty.",
                    "type": "object"
                },
                "tokenUrl": {
                    "description": "The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard\nrequires the use of TLS.",
                    "type": "string"
                }
            },
            "required": [
                "authorizationUrl",
                "scopes",
                "tokenUrl"
            ],
            "type": "object"
        },
        "CancelTaskRequest": {
            "description": "JSON-RPC request model for the 'tasks/cancel' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "tasks/cancel",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/TaskIdParams",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "CancelTaskResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/CancelTaskSuccessResponse"
                }
            ],
            "description": "JSON-RPC response for the 'tasks/cancel' method."
        },
        "CancelTaskSuccessResponse": {
            "description": "JSON-RPC success response model for the 'tasks/cancel' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/Task",
                    "description": "The result object on success."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "ClientCredentialsOAuthFlow": {
            "description": "Configuration details for a supported OAuth Flow",
            "properties": {
                "refreshUrl": {
                    "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2\nstandard requires the use of TLS.",
                    "type": "string"
                },
                "scopes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The available scopes for the OAuth2 security scheme. A map between the scope name and a short\ndescription for it. The map MAY be empty.",
                    "type": "object"
                },
                "tokenUrl": {
                    "description": "The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard\nrequires the use of TLS.",
                    "type": "string"
                }
            },
            "required": [
                "scopes",
                "tokenUrl"
            ],
            "type": "object"
        },
        "ContentTypeNotSupportedError": {
            "description": "A2A specific error indicating incompatible content types between request and agent capabilities.",
            "properties": {
                "code": {
                    "const": -32005,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Incompatible content types",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "DataPart": {
            "description": "Represents a structured data segment within a message part.",
            "properties": {
                "data": {
                    "additionalProperties": {},
                    "description": "Structured data content",
                    "type": "object"
                },
                "kind": {
                    "const": "data",
                    "description": "Part type - data for DataParts",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Optional metadata associated with the part.",
                    "type": "object"
                }
            },
            "required": [
                "data",
                "kind"
            ],
            "type": "object"
        },
        "FileBase": {
            "description": "Represents the base entity for FileParts",
            "properties": {
                "mimeType": {
                    "description": "Optional mimeType for the file",
                    "type": "string"
                },
                "name": {
                    "description": "Optional name for the file",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FilePart": {
            "description": "Represents a File segment within parts.",
            "properties": {
                "file": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FileWithBytes"
                        },
                        {
                            "$ref": "#/definitions/FileWithUri"
                        }
                    ],
                    "description": "File content either as url or bytes"
                },
                "kind": {
                    "const": "file",
                    "description": "Part type - file for FileParts",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Optional metadata associated with the part.",
                    "type": "object"
                }
            },
            "required": [
                "file",
                "kind"
            ],
            "type": "object"
        },
        "FileWithBytes": {
            "description": "Define the variant where 'bytes' is present and 'uri' is absent",
            "properties": {
                "bytes": {
                    "description": "base64 encoded content of the file",
                    "type": "string"
                },
                "mimeType": {
                    "description": "Optional mimeType for the file",
                    "type": "string"
                },
                "name": {
                    "description": "Optional name for the file",
                    "type": "string"
                }
            },
            "required": [
                "bytes"
            ],
            "type": "object"
        },
        "FileWithUri": {
            "description": "Define the variant where 'uri' is present and 'bytes' is absent",
            "properties": {
                "mimeType": {
                    "description": "Optional mimeType for the file",
                    "type": "string"
                },
                "name": {
                    "description": "Optional name for the file",
                    "type": "string"
                },
                "uri": {
                    "description": "URL for the File content",
                    "type": "string"
                }
            },
            "required": [
                "uri"
            ],
            "type": "object"
        },
        "GetTaskPushNotificationConfigRequest": {
            "description": "JSON-RPC request model for the 'tasks/pushNotificationConfig/get' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "tasks/pushNotificationConfig/get",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/TaskIdParams",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "GetTaskPushNotificationConfigResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/GetTaskPushNotificationConfigSuccessResponse"
                }
            ],
            "description": "JSON-RPC response for the 'tasks/pushNotificationConfig/set' method."
        },
        "GetTaskPushNotificationConfigSuccessResponse": {
            "description": "JSON-RPC success response model for the 'tasks/pushNotificationConfig/get' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/TaskPushNotificationConfig",
                    "description": "The result object on success."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "GetTaskRequest": {
            "description": "JSON-RPC request model for the 'tasks/get' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "tasks/get",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/TaskQueryParams",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "GetTaskResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/GetTaskSuccessResponse"
                }
            ],
            "description": "JSON-RPC response for the 'tasks/get' method."
        },
        "GetTaskSuccessResponse": {
            "description": "JSON-RPC success response for the 'tasks/get' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/Task",
                    "description": "The result object on success."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "HTTPAuthSecurityScheme": {
            "description": "HTTP Authentication security scheme.",
            "properties": {
                "bearerFormat": {
                    "description": "A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually\ngenerated by an authorization server, so this information is primarily for documentation\npurposes.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of this security scheme.",
                    "type": "string"
                },
                "scheme": {
                    "description": "The name of the HTTP Authentication scheme to be used in the Authorization header as defined\nin RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.\nThe value is case-insensitive, as defined in RFC7235.",
                    "type": "string"
                },
                "type": {
                    "const": "http",
                    "type": "string"
                }
            },
            "required": [
                "scheme",
                "type"
            ],
            "type": "object"
        },
        "ImplicitOAuthFlow": {
            "description": "Configuration details for a supported OAuth Flow",
            "properties": {
                "authorizationUrl": {
                    "description": "The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2\nstandard requires the use of TLS",
                    "type": "string"
                },
                "refreshUrl": {
                    "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2\nstandard requires the use of TLS.",
                    "type": "string"
                },
                "scopes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The available scopes for the OAuth2 security scheme. A map between the scope name and a short\ndescription for it. The map MAY be empty.",
                    "type": "object"
                }
            },
            "required": [
                "authorizationUrl",
                "scopes"
            ],
            "type": "object"
        },
        "InternalError": {
            "description": "JSON-RPC error indicating an internal JSON-RPC error on the server.",
            "properties": {
                "code": {
                    "const": -32603,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Internal error",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "InvalidAgentResponseError": {
            "description": "A2A specific error indicating agent returned invalid response for the current method",
            "properties": {
                "code": {
                    "const": -32006,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Invalid agent response",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "InvalidParamsError": {
            "description": "JSON-RPC error indicating invalid method parameter(s).",
            "properties": {
                "code": {
                    "const": -32602,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Invalid parameters",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "InvalidRequestError": {
            "description": "JSON-RPC error indicating the JSON sent is not a valid Request object.",
            "properties": {
                "code": {
                    "const": -32600,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Request payload validation error",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "JSONParseError": {
            "description": "JSON-RPC error indicating invalid JSON was received by the server.",
            "properties": {
                "code": {
                    "const": -32700,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Invalid JSON payload",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "JSONRPCError": {
            "description": "Represents a JSON-RPC 2.0 Error object.\nThis is typically included in a JSONRPCErrorResponse when an error occurs.",
            "properties": {
                "code": {
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "JSONRPCErrorResponse": {
            "description": "Represents a JSON-RPC 2.0 Error Response object.",
            "properties": {
                "error": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/JSONRPCError"
                        },
                        {
                            "$ref": "#/definitions/JSONParseError"
                        },
                        {
                            "$ref": "#/definitions/InvalidRequestError"
                        },
                        {
                            "$ref": "#/definitions/MethodNotFoundError"
                        },
                        {
                            "$ref": "#/definitions/InvalidParamsError"
                        },
                        {
                            "$ref": "#/definitions/InternalError"
                        },
                        {
                            "$ref": "#/definitions/TaskNotFoundError"
                        },
                        {
                            "$ref": "#/definitions/TaskNotCancelableError"
                        },
                        {
                            "$ref": "#/definitions/PushNotificationNotSupportedError"
                        },
                        {
                            "$ref": "#/definitions/UnsupportedOperationError"
                        },
                        {
                            "$ref": "#/definitions/ContentTypeNotSupportedError"
                        },
                        {
                            "$ref": "#/definitions/InvalidAgentResponseError"
                        }
                    ]
                },
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                }
            },
            "required": [
                "error",
                "id",
                "jsonrpc"
            ],
            "type": "object"
        },
        "JSONRPCMessage": {
            "description": "Base interface for any JSON-RPC 2.0 request or response.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                }
            },
            "required": [
                "jsonrpc"
            ],
            "type": "object"
        },
        "JSONRPCRequest": {
            "description": "Represents a JSON-RPC 2.0 Request object.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "additionalProperties": {},
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method.",
                    "type": "object"
                }
            },
            "required": [
                "jsonrpc",
                "method"
            ],
            "type": "object"
        },
        "JSONRPCResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/SendMessageSuccessResponse"
                },
                {
                    "$ref": "#/definitions/SendStreamingMessageSuccessResponse"
                },
                {
                    "$ref": "#/definitions/GetTaskSuccessResponse"
                },
                {
                    "$ref": "#/definitions/CancelTaskSuccessResponse"
                },
                {
                    "$ref": "#/definitions/SetTaskPushNotificationConfigSuccessResponse"
                },
                {
                    "$ref": "#/definitions/GetTaskPushNotificationConfigSuccessResponse"
                }
            ],
            "description": "Represents a JSON-RPC 2.0 Response object."
        },
        "JSONRPCSuccessResponse": {
            "description": "Represents a JSON-RPC 2.0 Success Response object.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "description": "The result object on success"
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "Message": {
            "description": "Represents a single message exchanged between user and agent.",
            "properties": {
                "contextId": {
                    "description": "The context the message is associated with",
                    "type": "string"
                },
                "extensions": {
                    "description": "The URIs of extensions that are present or contributed to this Message.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "kind": {
                    "const": "message",
                    "description": "Event type",
                    "type": "string"
                },
                "messageId": {
                    "description": "Identifier created by the message creator",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Extension metadata.",
                    "type": "object"
                },
                "parts": {
                    "description": "Message content",
                    "items": {
                        "$ref": "#/definitions/Part"
                    },
                    "type": "array"
                },
                "referenceTaskIds": {
                    "description": "List of tasks referenced as context by this message.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "role": {
                    "description": "Message sender's role",
                    "enum": [
                        "agent",
                        "user"
                    ],
                    "type": "string"
                },
                "taskId": {
                    "description": "Identifier of task the message is related to",
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "messageId",
                "parts",
                "role"
            ],
            "type": "object"
        },
        "MessageSendConfiguration": {
            "description": "Configuration for the send message request.",
            "properties": {
                "acceptedOutputModes": {
                    "description": "Accepted output modalities by the client.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "blocking": {
                    "description": "If the server should treat the client as a blocking request.",
                    "type": "boolean"
                },
                "historyLength": {
                    "description": "Number of recent messages to be retrieved.",
                    "type": "integer"
                },
                "pushNotificationConfig": {
                    "$ref": "#/definitions/PushNotificationConfig",
                    "description": "Where the server should send notifications when disconnected."
                }
            },
            "required": [
                "acceptedOutputModes"
            ],
            "type": "object"
        },
        "MessageSendParams": {
            "description": "Sent by the client to the agent as a request. May create, continue or restart a task.",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/MessageSendConfiguration",
                    "description": "Send message configuration."
                },
                "message": {
                    "$ref": "#/definitions/Message",
                    "description": "The message being sent to the server."
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Extension metadata.",
                    "type": "object"
                }
            },
            "required": [
                "message"
            ],
            "type": "object"
        },
        "MethodNotFoundError": {
            "description": "JSON-RPC error indicating the method does not exist or is not available.",
            "properties": {
                "code": {
                    "const": -32601,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Method not found",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "OAuth2SecurityScheme": {
            "description": "OAuth2.0 security scheme configuration.",
            "properties": {
                "description": {
                    "description": "Description of this security scheme.",
                    "type": "string"
                },
                "flows": {
                    "$ref": "#/definitions/OAuthFlows",
                    "description": "An object containing configuration information for the flow types supported."
                },
                "type": {
                    "const": "oauth2",
                    "type": "string"
                }
            },
            "required": [
                "flows",
                "type"
            ],
            "type": "object"
        },
        "OAuthFlows": {
            "description": "Allows configuration of the supported OAuth Flows",
            "properties": {
                "authorizationCode": {
                    "$ref": "#/definitions/AuthorizationCodeOAuthFlow",
                    "description": "Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0."
                },
                "clientCredentials": {
                    "$ref": "#/definitions/ClientCredentialsOAuthFlow",
                    "description": "Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0"
                },
                "implicit": {
                    "$ref": "#/definitions/ImplicitOAuthFlow",
                    "description": "Configuration for the OAuth Implicit flow"
                },
                "password": {
                    "$ref": "#/definitions/PasswordOAuthFlow",
                    "description": "Configuration for the OAuth Resource Owner Password flow"
                }
            },
            "type": "object"
        },
        "OpenIdConnectSecurityScheme": {
            "description": "OpenID Connect security scheme configuration.",
            "properties": {
                "description": {
                    "description": "Description of this security scheme.",
                    "type": "string"
                },
                "openIdConnectUrl": {
                    "description": "Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.",
                    "type": "string"
                },
                "type": {
                    "const": "openIdConnect",
                    "type": "string"
                }
            },
            "required": [
                "openIdConnectUrl",
                "type"
            ],
            "type": "object"
        },
        "Part": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TextPart"
                },
                {
                    "$ref": "#/definitions/FilePart"
                },
                {
                    "$ref": "#/definitions/DataPart"
                }
            ],
            "description": "Represents a part of a message, which can be text, a file, or structured data."
        },
        "PartBase": {
            "description": "Base properties common to all message parts.",
            "properties": {
                "metadata": {
                    "additionalProperties": {},
                    "description": "Optional metadata associated with the part.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PasswordOAuthFlow": {
            "description": "Configuration details for a supported OAuth Flow",
            "properties": {
                "refreshUrl": {
                    "description": "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2\nstandard requires the use of TLS.",
                    "type": "string"
                },
                "scopes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The available scopes for the OAuth2 security scheme. A map between the scope name and a short\ndescription for it. The map MAY be empty.",
                    "type": "object"
                },
                "tokenUrl": {
                    "description": "The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard\nrequires the use of TLS.",
                    "type": "string"
                }
            },
            "required": [
                "scopes",
                "tokenUrl"
            ],
            "type": "object"
        },
        "PushNotificationAuthenticationInfo": {
            "description": "Defines authentication details for push notifications.",
            "properties": {
                "credentials": {
                    "description": "Optional credentials",
                    "type": "string"
                },
                "schemes": {
                    "description": "Supported authentication schemes - e.g. Basic, Bearer",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "schemes"
            ],
            "type": "object"
        },
        "PushNotificationConfig": {
            "description": "Configuration for setting up push notifications for task updates.",
            "properties": {
                "authentication": {
                    "$ref": "#/definitions/PushNotificationAuthenticationInfo"
                },
                "id": {
                    "description": "Push Notification ID - created by server to support multiple callbacks",
                    "type": "string"
                },
                "token": {
                    "description": "Token unique to this task/session.",
                    "type": "string"
                },
                "url": {
                    "description": "URL for sending the push notifications.",
                    "type": "string"
                }
            },
            "required": [
                "url"
            ],
            "type": "object"
        },
        "PushNotificationNotSupportedError": {
            "description": "A2A specific error indicating the agent does not support push notifications.",
            "properties": {
                "code": {
                    "const": -32003,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Push Notification is not supported",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "SecurityScheme": {
            "anyOf": [
                {
                    "$ref": "#/definitions/APIKeySecurityScheme"
                },
                {
                    "$ref": "#/definitions/HTTPAuthSecurityScheme"
                },
                {
                    "$ref": "#/definitions/OAuth2SecurityScheme"
                },
                {
                    "$ref": "#/definitions/OpenIdConnectSecurityScheme"
                }
            ],
            "description": "Mirrors the OpenAPI Security Scheme Object\n(https://swagger.io/specification/#security-scheme-object)"
        },
        "SecuritySchemeBase": {
            "description": "Base properties shared by all security schemes.",
            "properties": {
                "description": {
                    "description": "Description of this security scheme.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SendMessageRequest": {
            "description": "JSON-RPC request model for the 'message/send' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "message/send",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/MessageSendParams",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "SendMessageResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/SendMessageSuccessResponse"
                }
            ],
            "description": "JSON-RPC response model for the 'message/send' method."
        },
        "SendMessageSuccessResponse": {
            "description": "JSON-RPC success response model for the 'message/send' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Task"
                        },
                        {
                            "$ref": "#/definitions/Message"
                        }
                    ],
                    "description": "The result object on success"
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "SendStreamingMessageRequest": {
            "description": "JSON-RPC request model for the 'message/stream' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "message/stream",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/MessageSendParams",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "SendStreamingMessageResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/SendStreamingMessageSuccessResponse"
                }
            ],
            "description": "JSON-RPC response model for the 'message/stream' method."
        },
        "SendStreamingMessageSuccessResponse": {
            "description": "JSON-RPC success response model for the 'message/stream' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Task"
                        },
                        {
                            "$ref": "#/definitions/Message"
                        },
                        {
                            "$ref": "#/definitions/TaskStatusUpdateEvent"
                        },
                        {
                            "$ref": "#/definitions/TaskArtifactUpdateEvent"
                        }
                    ],
                    "description": "The result object on success"
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "SetTaskPushNotificationConfigRequest": {
            "description": "JSON-RPC request model for the 'tasks/pushNotificationConfig/set' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "tasks/pushNotificationConfig/set",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/TaskPushNotificationConfig",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "SetTaskPushNotificationConfigResponse": {
            "anyOf": [
                {
                    "$ref": "#/definitions/JSONRPCErrorResponse"
                },
                {
                    "$ref": "#/definitions/SetTaskPushNotificationConfigSuccessResponse"
                }
            ],
            "description": "JSON-RPC response for the 'tasks/pushNotificationConfig/set' method."
        },
        "SetTaskPushNotificationConfigSuccessResponse": {
            "description": "JSON-RPC success response model for the 'tasks/pushNotificationConfig/set' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer",
                        "null"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/TaskPushNotificationConfig",
                    "description": "The result object on success."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "result"
            ],
            "type": "object"
        },
        "Task": {
            "properties": {
                "artifacts": {
                    "description": "Collection of artifacts created by the agent.",
                    "items": {
                        "$ref": "#/definitions/Artifact"
                    },
                    "type": "array"
                },
                "contextId": {
                    "description": "Server-generated id for contextual alignment across interactions",
                    "type": "string"
                },
                "history": {
                    "items": {
                        "$ref": "#/definitions/Message"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Unique identifier for the task",
                    "type": "string"
                },
                "kind": {
                    "const": "task",
                    "description": "Event type",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Extension metadata.",
                    "type": "object"
                },
                "status": {
                    "$ref": "#/definitions/TaskStatus",
                    "description": "Current status of the task"
                }
            },
            "required": [
                "contextId",
                "id",
                "kind",
                "status"
            ],
            "type": "object"
        },
        "TaskArtifactUpdateEvent": {
            "description": "Sent by server during sendStream or subscribe requests",
            "properties": {
                "append": {
                    "description": "Indicates if this artifact appends to a previous one",
                    "type": "boolean"
                },
                "artifact": {
                    "$ref": "#/definitions/Artifact",
                    "description": "Generated artifact"
                },
                "contextId": {
                    "description": "The context the task is associated with",
                    "type": "string"
                },
                "kind": {
                    "const": "artifact-update",
                    "description": "Event type",
                    "type": "string"
                },
                "lastChunk": {
                    "description": "Indicates if this is the last chunk of the artifact",
                    "type": "boolean"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Extension metadata.",
                    "type": "object"
                },
                "taskId": {
                    "description": "Task id",
                    "type": "string"
                }
            },
            "required": [
                "artifact",
                "contextId",
                "kind",
                "taskId"
            ],
            "type": "object"
        },
        "TaskIdParams": {
            "description": "Parameters containing only a task ID, used for simple task operations.",
            "properties": {
                "id": {
                    "description": "Task id.",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "type": "object"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "TaskNotCancelableError": {
            "description": "A2A specific error indicating the task is in a state where it cannot be canceled.",
            "properties": {
                "code": {
                    "const": -32002,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Task cannot be canceled",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "TaskNotFoundError": {
            "description": "A2A specific error indicating the requested task ID was not found.",
            "properties": {
                "code": {
                    "const": -32001,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "Task not found",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        },
        "TaskPushNotificationConfig": {
            "description": "Parameters for setting or getting push notification configuration for a task",
            "properties": {
                "pushNotificationConfig": {
                    "$ref": "#/definitions/PushNotificationConfig",
                    "description": "Push notification configuration."
                },
                "taskId": {
                    "description": "Task id.",
                    "type": "string"
                }
            },
            "required": [
                "pushNotificationConfig",
                "taskId"
            ],
            "type": "object"
        },
        "TaskQueryParams": {
            "description": "Parameters for querying a task, including optional history length.",
            "properties": {
                "historyLength": {
                    "description": "Number of recent messages to be retrieved.",
                    "type": "integer"
                },
                "id": {
                    "description": "Task id.",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "type": "object"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "TaskResubscriptionRequest": {
            "description": "JSON-RPC request model for the 'tasks/resubscribe' method.",
            "properties": {
                "id": {
                    "description": "An identifier established by the Client that MUST contain a String, Number.\nNumbers SHOULD NOT contain fractional parts.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "jsonrpc": {
                    "const": "2.0",
                    "description": "Specifies the version of the JSON-RPC protocol. MUST be exactly \"2.0\".",
                    "type": "string"
                },
                "method": {
                    "const": "tasks/resubscribe",
                    "description": "A String containing the name of the method to be invoked.",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/TaskIdParams",
                    "description": "A Structured value that holds the parameter values to be used during the invocation of the method."
                }
            },
            "required": [
                "id",
                "jsonrpc",
                "method",
                "params"
            ],
            "type": "object"
        },
        "TaskState": {
            "description": "Represents the possible states of a Task.",
            "enum": [
                "submitted",
                "working",
                "input-required",
                "completed",
                "canceled",
                "failed",
                "rejected",
                "auth-required",
                "unknown"
            ],
            "type": "string"
        },
        "TaskStatus": {
            "description": "TaskState and accompanying message.",
            "properties": {
                "message": {
                    "$ref": "#/definitions/Message",
                    "description": "Additional status updates for client"
                },
                "state": {
                    "$ref": "#/definitions/TaskState"
                },
                "timestamp": {
                    "description": "ISO 8601 datetime string when the status was recorded.",
                    "type": "string"
                }
            },
            "required": [
                "state"
            ],
            "type": "object"
        },
        "TaskStatusUpdateEvent": {
            "description": "Sent by server during sendStream or subscribe requests",
            "properties": {
                "contextId": {
                    "description": "The context the task is associated with",
                    "type": "string"
                },
                "final": {
                    "description": "Indicates the end of the event stream",
                    "type": "boolean"
                },
                "kind": {
                    "const": "status-update",
                    "description": "Event type",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Extension metadata.",
                    "type": "object"
                },
                "status": {
                    "$ref": "#/definitions/TaskStatus",
                    "description": "Current status of the task"
                },
                "taskId": {
                    "description": "Task id",
                    "type": "string"
                }
            },
            "required": [
                "contextId",
                "final",
                "kind",
                "status",
                "taskId"
            ],
            "type": "object"
        },
        "TextPart": {
            "description": "Represents a text segment within parts.",
            "properties": {
                "kind": {
                    "const": "text",
                    "description": "Part type - text for TextParts",
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {},
                    "description": "Optional metadata associated with the part.",
                    "type": "object"
                },
                "text": {
                    "description": "Text content",
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "text"
            ],
            "type": "object"
        },
        "UnsupportedOperationError": {
            "description": "A2A specific error indicating the requested operation is not supported by the agent.",
            "properties": {
                "code": {
                    "const": -32004,
                    "description": "A Number that indicates the error type that occurred.",
                    "type": "integer"
                },
                "data": {
                    "description": "A Primitive or Structured value that contains additional information about the error.\nThis may be omitted."
                },
                "message": {
                    "default": "This operation is not supported",
                    "description": "A String providing a short description of the error.",
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ],
            "type": "object"
        }
    }
}

================
File: src/main/java/net/kaduk/a2a/AgentCard.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;
import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AgentCard {
    @JsonProperty("capabilities")
    private AgentCapabilities capabilities;

    @JsonProperty("defaultInputModes")
    private List<String> defaultInputModes;

    @JsonProperty("defaultOutputModes")
    private List<String> defaultOutputModes;

    @JsonProperty("description")
    private String description;

    @JsonProperty("documentationUrl")
    private String documentationUrl;

    @JsonProperty("iconUrl")
    private String iconUrl;

    @JsonProperty("name")
    private String name;

    @JsonProperty("provider")
    private AgentProvider provider;

    @JsonProperty("security")
    private List<Map<String, List<String>>> security;

    @JsonProperty("securitySchemes")
    private Map<String, Object> securitySchemes;

    @JsonProperty("skills")
    private List<AgentSkill> skills;

    @JsonProperty("supportsAuthenticatedExtendedCard")
    private Boolean supportsAuthenticatedExtendedCard;

    @JsonProperty("url")
    private String url;

    @JsonProperty("version")
    private String version;
}

================
File: src/main/java/net/kaduk/a2a/ExampleMultiAgentUsage.java
================
// src/main/java/net/kaduk/a2a/ExampleMultiAgentUsage.java
package net.kaduk.a2a;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

import java.util.Collections;
import java.util.UUID;

////////////////////////////////////////////////////////////////
// Worker Agent 1
////////////////////////////////////////////////////////////////
@A2AAgent(name = "WorkerA", version = "1.0", description = "Performs data transformation.")
@Component
class WorkerA {

    @A2AAgentSkill(id = "transform", name = "Transform", description = "Transforms input to uppercase.", tags = {"worker"})
    public String transform(String input) {
        return input.toUpperCase();
    }
}

////////////////////////////////////////////////////////////////
// Worker Agent 2
////////////////////////////////////////////////////////////////
@A2AAgent(name = "WorkerB", version = "1.0", description = "Performs data aggregation.")
@Component
class WorkerB {

    @A2AAgentSkill(id = "aggregate", name = "Aggregate", description = "Counts characters.", tags = {"worker"})
    public int aggregate(String input) {
        return input.length();
    }
}

////////////////////////////////////////////////////////////////
// Coordinator Agent (invokes workers according to plan)
////////////////////////////////////////////////////////////////
@A2AAgent(name = "Coordinator", version = "1.0", description = "Coordinates worker agents via DAG plan.")
@Component
class Coordinator {

    @Autowired
    private A2AWebClientService a2aClient;

    // Example: Coordinator's skill that orchestrates calls to WorkerA and WorkerB according to a DAG plan
    @A2AAgentSkill(id = "coordinate", name = "Coordinate DAG Processing", description = "Executes DAG plan with two workers", tags = {"coordinator"})
    public Mono<String> executeWorkflow(String input, String workerAUrl, String workerBUrl) {
        // Step 1: Call WorkerA (transform task)
        SendMessageRequest requestA = SendMessageRequest.builder()
                .id("reqA-" + UUID.randomUUID())
                .params(MessageSendParams.builder()
                    .message(Message.builder()
                        .kind("message")
                        .messageId("msg-" + UUID.randomUUID())
                        .role("coordinator")
                        .parts(Collections.emptyList()) // can use part for input if needed
                        .taskId("transform")
                        .build())
                    .build())
                .build();

        // step 2 depends on result of workerA
        return a2aClient.sendMessage(workerAUrl, requestA)
            .flatMap(respA -> {
                // Normally you would parse respA for content; here just simulate next call
                String transformed = input.toUpperCase(); // simulate WorkerA transform
                SendMessageRequest requestB = SendMessageRequest.builder()
                        .id("reqB-" + UUID.randomUUID())
                        .params(MessageSendParams.builder()
                                .message(Message.builder()
                                        .kind("message")
                                        .messageId("msg-" + UUID.randomUUID())
                                        .role("coordinator")
                                        .parts(Collections.emptyList())
                                        .taskId("aggregate")
                                        .build())
                                .build())
                        .build();
                return a2aClient.sendMessage(workerBUrl, requestB)
                    .map(respB -> {
                        // Simulate aggregate (normally parse respB to get actual result)
                        int count = transformed.length(); // simulate WorkerB aggregate
                        // Consolidate final result
                        return "Final result: [" + transformed + "] has length " + count;
                    });
            });
    }
}

================
File: src/main/java/net/kaduk/a2a/Message.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;
import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Message {
    @JsonProperty("kind")
    private String kind;

    @JsonProperty("messageId")
    private String messageId;

    @JsonProperty("parts")
    private List<Part> parts;

    @JsonProperty("role")
    private String role; // "agent" or "user"

    @JsonProperty("contextId")
    private String contextId;

    @JsonProperty("extensions")
    private List<String> extensions;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;

    @JsonProperty("referenceTaskIds")
    private List<String> referenceTaskIds;

    @JsonProperty("taskId")
    private String taskId;
}

================
File: src/main/java/net/kaduk/a2a/MessageSendParams.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.Map;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class MessageSendParams {
    @JsonProperty("message")
    private Message message;

    @JsonProperty("configuration")
    private MessageSendConfiguration configuration;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;
}

================
File: src/main/java/net/kaduk/a2a/SendMessageSuccessResponse.java
================
package net.kaduk.a2a;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SendMessageSuccessResponse {
    @JsonProperty("jsonrpc")
    @Builder.Default
    private String jsonrpc = "2.0";

    @JsonProperty("id")
    private String id;

    @JsonProperty("result")
    private Message result;
}

================
File: src/main/java/net/kaduk/a2a/A2AAutoConfiguration.java
================
// src/main/java/net/kaduk/a2a/A2AAutoConfiguration.java
package net.kaduk.a2a;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.web.reactive.function.client.WebClient;

/**
 * Auto-configuration for the a2a-java library.
 * Ensures all components in 'net.kaduk.a2a' are registered when used as a dependency.
 */
@Configuration
@ComponentScan(basePackages = "net.kaduk.a2a", excludeFilters = {
    @ComponentScan.Filter(type = org.springframework.context.annotation.FilterType.ASSIGNABLE_TYPE, 
                         value = {A2AAgentRegistry.class, A2AWebClientService.class, AgentController.class})
})
public class A2AAutoConfiguration {

    @Bean
    @ConditionalOnMissingBean
    public WebClient webClient() {
        return WebClient.builder()
                .codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(10 * 1024 * 1024))
                .build();
    }

    @Bean
    @ConditionalOnMissingBean
    public A2AWebClientService a2aWebClientService(WebClient webClient) {
        return new A2AWebClientService(webClient);
    }

    @Bean
    @ConditionalOnMissingBean
    public A2AAgentRegistry a2aAgentRegistry() {
        return new A2AAgentRegistry();
    }

    @Bean
    @ConditionalOnMissingBean
    @DependsOn({"a2aAgentRegistry", "a2aWebClientService"})
    public AgentController agentController(A2AAgentRegistry a2aAgentRegistry) {
        return new AgentController(a2aAgentRegistry);
    }
}

================
File: src/main/java/net/kaduk/a2a/A2AWebClientService.java
================
// Delete the incorrectly named file and create the correct one
// src/main/java/net/kaduk/a2a/A2AWebClientService.java
package net.kaduk.a2a;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Service for agent-to-agent (A2A) JSON-RPC communication over HTTP using WebFlux.
 */
@Component
public class A2AWebClientService {
    
    private final WebClient webClient;

    public A2AWebClientService(WebClient webClient) {
        this.webClient = webClient;
    }

    /**
     * Sends an A2A JSON-RPC message/send request to the agent at the provided URL.
     */
    public Mono<SendMessageSuccessResponse> sendMessage(String agentUrl, SendMessageRequest request) {
        return webClient.post()
                .uri(agentUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .retrieve()
                .bodyToMono(SendMessageSuccessResponse.class);
    }

    /**
     * Sends a streaming message request.
     */
    public Flux<Object> sendStreamingMessage(String agentUrl, SendStreamingMessageRequest request) {
        return webClient.post()
                .uri(agentUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .retrieve()
                .bodyToFlux(Object.class);
    }

    /**
     * Gets a task by ID.
     */
    public Mono<GetTaskResponse> getTask(String agentUrl, GetTaskRequest request) {
        return webClient.post()
                .uri(agentUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .retrieve()
                .bodyToMono(GetTaskResponse.class);
    }

    /**
     * Cancels a task.
     */
    public Mono<CancelTaskResponse> cancelTask(String agentUrl, CancelTaskRequest request) {
        return webClient.post()
                .uri(agentUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .retrieve()
                .bodyToMono(CancelTaskResponse.class);
    }
}

================
File: src/main/java/net/kaduk/a2a/A2AAgentRegistry.java
================
// src/main/java/net/kaduk/a2a/A2AAgentRegistry.java
package net.kaduk.a2a;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;
import lombok.Getter;

@Component
public class A2AAgentRegistry implements ApplicationContextAware {

    private ApplicationContext applicationContext;

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    /**
     * Holds info about all registered agents:
     * key: bean name, value: AgentMeta (contains metadata, skills)
     */
    @Getter
    private final Map<String, AgentMeta> agentRegistry = new HashMap<>();

    @PostConstruct
    public void scanAgents() {
        // Delay the scanning to avoid circular dependency during startup
        try {
            scanAndRegisterAgents();
        } catch (Exception e) {
            // Log error but don't fail startup
            System.err.println("Error during agent scanning: " + e.getMessage());
        }
    }

    private void scanAndRegisterAgents() {
        Map<String, Object> agentBeans = applicationContext.getBeansWithAnnotation(A2AAgent.class);
        
        for (Map.Entry<String, Object> entry : agentBeans.entrySet()) {
            String beanName = entry.getKey();
            Object bean = entry.getValue();
            
            Class<?> beanClass = bean.getClass();
            A2AAgent agentAnnotation = beanClass.getAnnotation(A2AAgent.class);
            
            if (agentAnnotation != null) {
                List<SkillMeta> skills = new ArrayList<>();

                for (Method method : beanClass.getMethods()) {
                    if (method.isAnnotationPresent(A2AAgentSkill.class)) {
                        A2AAgentSkill skillAnn = method.getAnnotation(A2AAgentSkill.class);
                        skills.add(new SkillMeta(skillAnn, method));
                    }
                }
                
                AgentMeta meta = new AgentMeta(agentAnnotation, bean, skills);
                agentRegistry.put(beanName, meta);
                System.out.println("Registered agent: " + agentAnnotation.name() + " with " + skills.size() + " skills");
            }
        }
    }

    @Getter
    public static class AgentMeta {
        private final String name;
        private final String version;
        private final String description;
        private final Object bean;
        private final List<SkillMeta> skills;

        public AgentMeta(A2AAgent agentAnn, Object bean, List<SkillMeta> skills) {
            this.name = agentAnn.name();
            this.version = agentAnn.version();
            this.description = agentAnn.description();
            this.bean = bean;
            this.skills = skills;
        }
    }

    @Getter
    public static class SkillMeta {
        private final String id;
        private final String name;
        private final String description;
        private final String[] tags;
        private final Method method;

        public SkillMeta(A2AAgentSkill ann, Method method) {
            this.id = ann.id();
            this.name = ann.name();
            this.description = ann.description();
            this.tags = ann.tags();
            this.method = method;
        }
    }
}

================
File: src/main/java/net/kaduk/a2a/AgentController.java
================
// src/main/java/net/kaduk/a2a/AgentController.java
package net.kaduk.a2a;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.springframework.context.annotation.Lazy;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@Lazy // Important: Lazy initialization to avoid circular dependency
public class AgentController {

    private final A2AAgentRegistry agentRegistry;

    // Constructor injection instead of field injection
    public AgentController(@Lazy A2AAgentRegistry agentRegistry) {
        this.agentRegistry = agentRegistry;
    }

    // Simple in-memory task storage for demo
    private final Map<String, Task> tasks = new ConcurrentHashMap<>();

    @GetMapping(value = "/agent/card", produces = MediaType.APPLICATION_JSON_VALUE)
    public Mono<AgentCard> getAgentCard() {
        List<A2AAgentRegistry.AgentMeta> agents = new ArrayList<>(agentRegistry.getAgentRegistry().values());
        if (agents.isEmpty()) {
            // Return a default card if no agents are registered yet
            return Mono.just(AgentCard.builder()
                    .name("A2A Agent")
                    .version("1.0")
                    .description("A2A Protocol Agent")
                    .skills(Collections.emptyList())
                    .defaultInputModes(Collections.singletonList("text/plain"))
                    .defaultOutputModes(Collections.singletonList("text/plain"))
                    .capabilities(AgentCapabilities.builder()
                            .streaming(true)
                            .pushNotifications(false)
                            .stateTransitionHistory(true)
                            .build())
                    .provider(AgentProvider.builder()
                            .organization("A2A System")
                            .url("http://localhost:8080")
                            .build())
                    .url("http://localhost:8080")
                    .build());
        }

        A2AAgentRegistry.AgentMeta meta = agents.get(0);
        List<AgentSkill> allSkills = agents.stream()
                .flatMap(agent -> agent.getSkills().stream().map(skillMeta ->
                        AgentSkill.builder()
                                .id(skillMeta.getId())
                                .name(skillMeta.getName())
                                .description(skillMeta.getDescription())
                                .tags(Arrays.asList(skillMeta.getTags()))
                                .build()
                )).collect(Collectors.toList());

        AgentCard card = AgentCard.builder()
                .name(meta.getName())
                .version(meta.getVersion())
                .description(meta.getDescription())
                .skills(allSkills)
                .defaultInputModes(Collections.singletonList("text/plain"))
                .defaultOutputModes(Collections.singletonList("text/plain"))
                .capabilities(AgentCapabilities.builder()
                        .streaming(true)
                        .pushNotifications(false)
                        .stateTransitionHistory(true)
                        .build())
                .provider(AgentProvider.builder()
                        .organization("A2A Auto MultiAgent System")
                        .url("http://localhost:8080")
                        .build())
                .url("http://localhost:8080")
                .build();
        return Mono.just(card);
    }

    @PostMapping(value = "/agent/message", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Mono<SendMessageSuccessResponse> handleSendMessage(@RequestBody SendMessageRequest request) {
        return processMessage(request.getParams())
                .map(task -> SendMessageSuccessResponse.builder()
                        .id(request.getId())
                        .result(createResponseMessage(task))
                        .build())
                .onErrorReturn(SendMessageSuccessResponse.builder()
                        .id(request.getId())
                        .result(Message.builder()
                                .kind("message")
                                .messageId(UUID.randomUUID().toString())
                                .role("agent")
                                .parts(Collections.singletonList(TextPart.builder()
                                        .text("Error processing request")
                                        .build()))
                                .build())
                        .build());
    }

    @PostMapping(value = "/agent/stream", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Flux<Object> handleStreamingMessage(@RequestBody SendStreamingMessageRequest request) {
        return processMessage(request.getParams())
                .flatMapMany(task -> Flux.just(
                        createTaskStatusUpdate(task),
                        createResponseMessage(task)
                ))
                .onErrorReturn(Map.of("error", "Failed to process streaming request"));
    }

    @PostMapping(value = "/agent/tasks/get", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Mono<GetTaskResponse> handleGetTask(@RequestBody GetTaskRequest request) {
        String taskId = request.getParams().getId();
        Task task = tasks.get(taskId);
        
        if (task == null) {
            return Mono.just(GetTaskResponse.builder()
                    .id(request.getId())
                    .error(A2AError.builder()
                            .code(-32001)
                            .message("Task not found")
                            .build())
                    .build());
        }

        return Mono.just(GetTaskResponse.builder()
                .id(request.getId())
                .result(task)
                .build());
    }

    @PostMapping(value = "/agent/tasks/cancel", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Mono<CancelTaskResponse> handleCancelTask(@RequestBody CancelTaskRequest request) {
        String taskId = request.getParams().getId();
        Task task = tasks.get(taskId);
        
        if (task == null) {
            return Mono.just(CancelTaskResponse.builder()
                    .id(request.getId())
                    .error(A2AError.builder()
                            .code(-32001)
                            .message("Task not found")
                            .build())
                    .build());
        }

        // Update task status to canceled
        task.setStatus(TaskStatus.builder()
                .state(TaskState.CANCELED)
                .timestamp(LocalDateTime.now().toString())
                .build());

        return Mono.just(CancelTaskResponse.builder()
                .id(request.getId())
                .result(task)
                .build());
    }

    private Mono<Task> processMessage(MessageSendParams params) {
        if (params == null || params.getMessage() == null) {
            return Mono.error(new IllegalArgumentException("Invalid message parameters"));
        }

        Message msg = params.getMessage();
        String skillId = msg.getTaskId();

        // Create or find task
        String taskId = msg.getTaskId() != null ? msg.getTaskId() : UUID.randomUUID().toString();
        Task task = tasks.computeIfAbsent(taskId, id -> Task.builder()
                .id(id)
                .contextId(msg.getContextId() != null ? msg.getContextId() : UUID.randomUUID().toString())
                .status(TaskStatus.builder()
                        .state(TaskState.WORKING)
                        .timestamp(LocalDateTime.now().toString())
                        .build())
                .history(new ArrayList<>())
                .build());

        // Extract input from message parts
        String input = extractInputFromMessage(msg);

        // Find and execute skill
        Map<String, A2AAgentRegistry.AgentMeta> agents = agentRegistry.getAgentRegistry();
        for (A2AAgentRegistry.AgentMeta agent : agents.values()) {
            Optional<A2AAgentRegistry.SkillMeta> skillOpt = agent.getSkills().stream()
                    .filter(meta -> meta.getId().equals(skillId))
                    .findFirst();
            
            if (skillOpt.isPresent()) {
                try {
                    A2AAgentRegistry.SkillMeta skill = skillOpt.get();
                    Object result;
                    
                    // Handle different parameter types
                    Class<?>[] paramTypes = skill.getMethod().getParameterTypes();
                    if (paramTypes.length == 0) {
                        result = skill.getMethod().invoke(agent.getBean());
                    } else if (paramTypes.length == 1) {
                        result = skill.getMethod().invoke(agent.getBean(), input);
                    } else {
                        // For multiple parameters, you might need more sophisticated parameter mapping
                        result = skill.getMethod().invoke(agent.getBean(), input);
                    }
                    
                    // Store result in task metadata
                    if (task.getMetadata() == null) {
                        task.setMetadata(new HashMap<>());
                    }
                    task.getMetadata().put("result", result != null ? result.toString() : "null");
                    
                    // Update task status
                    task.setStatus(TaskStatus.builder()
                            .state(TaskState.COMPLETED)
                            .timestamp(LocalDateTime.now().toString())
                            .build());
                    
                    return Mono.just(task);
                } catch (Exception e) {
                    System.err.println("Error executing skill " + skillId + ": " + e.getMessage());
                    task.setStatus(TaskStatus.builder()
                            .state(TaskState.FAILED)
                            .timestamp(LocalDateTime.now().toString())
                            .build());
                    if (task.getMetadata() == null) {
                        task.setMetadata(new HashMap<>());
                    }
                    task.getMetadata().put("error", e.getMessage());
                    return Mono.just(task);
                }
            }
        }

        task.setStatus(TaskStatus.builder()
                .state(TaskState.REJECTED)
                .timestamp(LocalDateTime.now().toString())
                .build());
        if (task.getMetadata() == null) {
            task.setMetadata(new HashMap<>());
        }
        task.getMetadata().put("error", "Skill not found: " + skillId);
        return Mono.just(task);
    }

    private String extractInputFromMessage(Message msg) {
        if (msg.getParts() != null && !msg.getParts().isEmpty()) {
            Part firstPart = msg.getParts().get(0);
            if (firstPart instanceof TextPart) {
                return ((TextPart) firstPart).getText();
            }
        }
        return "";
    }

    private Message createResponseMessage(Task task) {
        String resultText = "Task completed";
        if (task.getMetadata() != null) {
            Object result = task.getMetadata().get("result");
            if (result != null) {
                resultText = result.toString();
            }
            Object error = task.getMetadata().get("error");
            if (error != null) {
                resultText = "Error: " + error.toString();
            }
        }

        return Message.builder()
                .kind("message")
                .messageId(UUID.randomUUID().toString())
                .role("agent")
                .contextId(task.getContextId())
                .taskId(task.getId())
                .parts(Collections.singletonList(TextPart.builder()
                        .text(resultText)
                        .build()))
                .build();
    }

    private Object createTaskStatusUpdate(Task task) {
        return Map.of(
                "kind", "status-update",
                "taskId", task.getId(),
                "contextId", task.getContextId(),
                "status", task.getStatus(),
                "final", task.getStatus().getState() == TaskState.COMPLETED ||
                        task.getStatus().getState() == TaskState.FAILED ||
                        task.getStatus().getState() == TaskState.CANCELED
        );
    }
}




================================================================
End of Codebase
================================================================
